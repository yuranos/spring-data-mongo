//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.07 at 03:28:23 PM EET 
//


package com.yuranos.session.model;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;


/**
 * <p>Java class for CardPaymentDetails complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CardPaymentDetails">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.thomascook.com/basket/1.0/payment}AbstractPaymentDetails">
 *       &lt;sequence>
 *         &lt;element name="CardDetails" type="{http://api.thomascook.com/basket/1.0/payment}CardDetails"/>
 *         &lt;element name="Browser" type="{http://api.thomascook.com/basket/1.0/payment}Browser"/>
 *         &lt;element name="TransactionDetails" type="{http://api.thomascook.com/basket/1.0/payment}TransactionDetails"/>
 *         &lt;element name="ThreeDSecure" type="{http://api.thomascook.com/basket/1.0/payment}ThreeDSecure" minOccurs="0"/>
 *         &lt;element name="OgoneIFrame" type="{http://api.thomascook.com/basket/1.0/payment}OgoneIFrame" minOccurs="0"/>
 *         &lt;element name="DirectDebitDetails" type="{http://api.thomascook.com/basket/1.0/payment}DirectDebitDetails" minOccurs="0"/>
 *         &lt;element name="AuthorisationMessage" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="status" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="PayId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CardPaymentDetails", namespace = "http://api.thomascook.com/basket/1.0/payment", propOrder = {
    "cardDetails",
    "browser",
    "transactionDetails",
    "threeDSecure",
    "ogoneIFrame",
    "directDebitDetails",
    "authorisationMessage",
    "status",
    "payId"
})
public class CardPaymentDetails
    extends AbstractPaymentDetails
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 12345L;
    @XmlElement(name = "CardDetails", required = true)
    @NotNull
    @Valid
    protected CardDetails cardDetails;
    @XmlElement(name = "Browser", required = true)
    @NotNull
    @Valid
    protected Browser browser;
    @XmlElement(name = "TransactionDetails", required = true)
    @NotNull
    @Valid
    protected TransactionDetails transactionDetails;
    @XmlElement(name = "ThreeDSecure")
    @Valid
    protected ThreeDSecure threeDSecure;
    @XmlElement(name = "OgoneIFrame")
    @Valid
    protected OgoneIFrame ogoneIFrame;
    @XmlElement(name = "DirectDebitDetails")
    @Valid
    protected DirectDebitDetails directDebitDetails;
    @XmlElement(name = "AuthorisationMessage")
    protected String authorisationMessage;
    protected String status;
    @XmlElement(name = "PayId")
    protected String payId;

    /**
     * Gets the value of the cardDetails property.
     * 
     * @return
     *     possible object is
     *     {@link CardDetails }
     *     
     */
    public CardDetails getCardDetails() {
        return cardDetails;
    }

    /**
     * Sets the value of the cardDetails property.
     * 
     * @param value
     *     allowed object is
     *     {@link CardDetails }
     *     
     */
    public void setCardDetails(CardDetails value) {
        this.cardDetails = value;
    }

    /**
     * Gets the value of the browser property.
     * 
     * @return
     *     possible object is
     *     {@link Browser }
     *     
     */
    public Browser getBrowser() {
        return browser;
    }

    /**
     * Sets the value of the browser property.
     * 
     * @param value
     *     allowed object is
     *     {@link Browser }
     *     
     */
    public void setBrowser(Browser value) {
        this.browser = value;
    }

    /**
     * Gets the value of the transactionDetails property.
     * 
     * @return
     *     possible object is
     *     {@link TransactionDetails }
     *     
     */
    public TransactionDetails getTransactionDetails() {
        return transactionDetails;
    }

    /**
     * Sets the value of the transactionDetails property.
     * 
     * @param value
     *     allowed object is
     *     {@link TransactionDetails }
     *     
     */
    public void setTransactionDetails(TransactionDetails value) {
        this.transactionDetails = value;
    }

    /**
     * Gets the value of the threeDSecure property.
     * 
     * @return
     *     possible object is
     *     {@link ThreeDSecure }
     *     
     */
    public ThreeDSecure getThreeDSecure() {
        return threeDSecure;
    }

    /**
     * Sets the value of the threeDSecure property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThreeDSecure }
     *     
     */
    public void setThreeDSecure(ThreeDSecure value) {
        this.threeDSecure = value;
    }

    /**
     * Gets the value of the ogoneIFrame property.
     * 
     * @return
     *     possible object is
     *     {@link OgoneIFrame }
     *     
     */
    public OgoneIFrame getOgoneIFrame() {
        return ogoneIFrame;
    }

    /**
     * Sets the value of the ogoneIFrame property.
     * 
     * @param value
     *     allowed object is
     *     {@link OgoneIFrame }
     *     
     */
    public void setOgoneIFrame(OgoneIFrame value) {
        this.ogoneIFrame = value;
    }

    /**
     * Gets the value of the directDebitDetails property.
     * 
     * @return
     *     possible object is
     *     {@link DirectDebitDetails }
     *     
     */
    public DirectDebitDetails getDirectDebitDetails() {
        return directDebitDetails;
    }

    /**
     * Sets the value of the directDebitDetails property.
     * 
     * @param value
     *     allowed object is
     *     {@link DirectDebitDetails }
     *     
     */
    public void setDirectDebitDetails(DirectDebitDetails value) {
        this.directDebitDetails = value;
    }

    /**
     * Gets the value of the authorisationMessage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuthorisationMessage() {
        return authorisationMessage;
    }

    /**
     * Sets the value of the authorisationMessage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuthorisationMessage(String value) {
        this.authorisationMessage = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStatus(String value) {
        this.status = value;
    }

    /**
     * Gets the value of the payId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPayId() {
        return payId;
    }

    /**
     * Sets the value of the payId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPayId(String value) {
        this.payId = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CardPaymentDetails)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CardPaymentDetails that = ((CardPaymentDetails) object);
        {
            CardDetails lhsCardDetails;
            lhsCardDetails = this.getCardDetails();
            CardDetails rhsCardDetails;
            rhsCardDetails = that.getCardDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cardDetails", lhsCardDetails), LocatorUtils.property(thatLocator, "cardDetails", rhsCardDetails), lhsCardDetails, rhsCardDetails)) {
                return false;
            }
        }
        {
            Browser lhsBrowser;
            lhsBrowser = this.getBrowser();
            Browser rhsBrowser;
            rhsBrowser = that.getBrowser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "browser", lhsBrowser), LocatorUtils.property(thatLocator, "browser", rhsBrowser), lhsBrowser, rhsBrowser)) {
                return false;
            }
        }
        {
            TransactionDetails lhsTransactionDetails;
            lhsTransactionDetails = this.getTransactionDetails();
            TransactionDetails rhsTransactionDetails;
            rhsTransactionDetails = that.getTransactionDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transactionDetails", lhsTransactionDetails), LocatorUtils.property(thatLocator, "transactionDetails", rhsTransactionDetails), lhsTransactionDetails, rhsTransactionDetails)) {
                return false;
            }
        }
        {
            ThreeDSecure lhsThreeDSecure;
            lhsThreeDSecure = this.getThreeDSecure();
            ThreeDSecure rhsThreeDSecure;
            rhsThreeDSecure = that.getThreeDSecure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "threeDSecure", lhsThreeDSecure), LocatorUtils.property(thatLocator, "threeDSecure", rhsThreeDSecure), lhsThreeDSecure, rhsThreeDSecure)) {
                return false;
            }
        }
        {
            OgoneIFrame lhsOgoneIFrame;
            lhsOgoneIFrame = this.getOgoneIFrame();
            OgoneIFrame rhsOgoneIFrame;
            rhsOgoneIFrame = that.getOgoneIFrame();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ogoneIFrame", lhsOgoneIFrame), LocatorUtils.property(thatLocator, "ogoneIFrame", rhsOgoneIFrame), lhsOgoneIFrame, rhsOgoneIFrame)) {
                return false;
            }
        }
        {
            DirectDebitDetails lhsDirectDebitDetails;
            lhsDirectDebitDetails = this.getDirectDebitDetails();
            DirectDebitDetails rhsDirectDebitDetails;
            rhsDirectDebitDetails = that.getDirectDebitDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directDebitDetails", lhsDirectDebitDetails), LocatorUtils.property(thatLocator, "directDebitDetails", rhsDirectDebitDetails), lhsDirectDebitDetails, rhsDirectDebitDetails)) {
                return false;
            }
        }
        {
            String lhsAuthorisationMessage;
            lhsAuthorisationMessage = this.getAuthorisationMessage();
            String rhsAuthorisationMessage;
            rhsAuthorisationMessage = that.getAuthorisationMessage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authorisationMessage", lhsAuthorisationMessage), LocatorUtils.property(thatLocator, "authorisationMessage", rhsAuthorisationMessage), lhsAuthorisationMessage, rhsAuthorisationMessage)) {
                return false;
            }
        }
        {
            String lhsStatus;
            lhsStatus = this.getStatus();
            String rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            String lhsPayId;
            lhsPayId = this.getPayId();
            String rhsPayId;
            rhsPayId = that.getPayId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "payId", lhsPayId), LocatorUtils.property(thatLocator, "payId", rhsPayId), lhsPayId, rhsPayId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CardDetails theCardDetails;
            theCardDetails = this.getCardDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cardDetails", theCardDetails), currentHashCode, theCardDetails);
        }
        {
            Browser theBrowser;
            theBrowser = this.getBrowser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "browser", theBrowser), currentHashCode, theBrowser);
        }
        {
            TransactionDetails theTransactionDetails;
            theTransactionDetails = this.getTransactionDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactionDetails", theTransactionDetails), currentHashCode, theTransactionDetails);
        }
        {
            ThreeDSecure theThreeDSecure;
            theThreeDSecure = this.getThreeDSecure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "threeDSecure", theThreeDSecure), currentHashCode, theThreeDSecure);
        }
        {
            OgoneIFrame theOgoneIFrame;
            theOgoneIFrame = this.getOgoneIFrame();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ogoneIFrame", theOgoneIFrame), currentHashCode, theOgoneIFrame);
        }
        {
            DirectDebitDetails theDirectDebitDetails;
            theDirectDebitDetails = this.getDirectDebitDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directDebitDetails", theDirectDebitDetails), currentHashCode, theDirectDebitDetails);
        }
        {
            String theAuthorisationMessage;
            theAuthorisationMessage = this.getAuthorisationMessage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorisationMessage", theAuthorisationMessage), currentHashCode, theAuthorisationMessage);
        }
        {
            String theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            String thePayId;
            thePayId = this.getPayId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "payId", thePayId), currentHashCode, thePayId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CardDetails theCardDetails;
            theCardDetails = this.getCardDetails();
            strategy.appendField(locator, this, "cardDetails", buffer, theCardDetails);
        }
        {
            Browser theBrowser;
            theBrowser = this.getBrowser();
            strategy.appendField(locator, this, "browser", buffer, theBrowser);
        }
        {
            TransactionDetails theTransactionDetails;
            theTransactionDetails = this.getTransactionDetails();
            strategy.appendField(locator, this, "transactionDetails", buffer, theTransactionDetails);
        }
        {
            ThreeDSecure theThreeDSecure;
            theThreeDSecure = this.getThreeDSecure();
            strategy.appendField(locator, this, "threeDSecure", buffer, theThreeDSecure);
        }
        {
            OgoneIFrame theOgoneIFrame;
            theOgoneIFrame = this.getOgoneIFrame();
            strategy.appendField(locator, this, "ogoneIFrame", buffer, theOgoneIFrame);
        }
        {
            DirectDebitDetails theDirectDebitDetails;
            theDirectDebitDetails = this.getDirectDebitDetails();
            strategy.appendField(locator, this, "directDebitDetails", buffer, theDirectDebitDetails);
        }
        {
            String theAuthorisationMessage;
            theAuthorisationMessage = this.getAuthorisationMessage();
            strategy.appendField(locator, this, "authorisationMessage", buffer, theAuthorisationMessage);
        }
        {
            String theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            String thePayId;
            thePayId = this.getPayId();
            strategy.appendField(locator, this, "payId", buffer, thePayId);
        }
        return buffer;
    }

}
