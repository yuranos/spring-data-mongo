//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.07 at 03:28:23 PM EET 
//


package com.yuranos.session.model;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://api.thomascook.com/basket/1.0/extra}Price" maxOccurs="16" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="Flight" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="RPH" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="cysAvailable" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="SeatQuantity" type="{http://www.w3.org/2001/XMLSchema}int" default="0" />
 *       &lt;attribute name="seatCharge" type="{http://api.thomascook.com/basket/1.0/extra}SeatChargeType" />
 *       &lt;attribute name="DirectionInd" type="{http://api.thomascook.com/basket/1.0/common}DirectionInd" />
 *       &lt;attribute name="readOnly" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "price"
})
@XmlRootElement(name = "Leg", namespace = "http://api.thomascook.com/basket/1.0/extra")
public class Leg
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 12345L;
    @XmlElement(name = "Price", namespace = "http://api.thomascook.com/basket/1.0/extra")
    @Size(min = 0, max = 16)
    @Valid
    protected List<Price> price;
    @XmlAttribute(name = "Code", required = true)
    @NotNull
    protected String code;
    @XmlAttribute(name = "Flight")
    protected String flight;
    @XmlAttribute(name = "RPH")
    protected String rph;
    @XmlAttribute(name = "cysAvailable")
    protected Boolean cysAvailable;
    @XmlAttribute(name = "SeatQuantity")
    protected Integer seatQuantity;
    @XmlAttribute(name = "seatCharge")
    protected SeatChargeType seatCharge;
    @XmlAttribute(name = "DirectionInd")
    protected DirectionInd directionInd;
    @XmlAttribute(name = "readOnly")
    protected Boolean readOnly;

    /**
     * Gets the value of the price property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the price property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPrice().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Price }
     * 
     * 
     */
    public List<Price> getPrice() {
        if (price == null) {
            price = new ArrayList<Price>();
        }
        return this.price;
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCode(String value) {
        this.code = value;
    }

    /**
     * Gets the value of the flight property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFlight() {
        return flight;
    }

    /**
     * Sets the value of the flight property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFlight(String value) {
        this.flight = value;
    }

    /**
     * Gets the value of the rph property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRPH() {
        return rph;
    }

    /**
     * Sets the value of the rph property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRPH(String value) {
        this.rph = value;
    }

    /**
     * Gets the value of the cysAvailable property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isCysAvailable() {
        if (cysAvailable == null) {
            return false;
        } else {
            return cysAvailable;
        }
    }

    /**
     * Sets the value of the cysAvailable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCysAvailable(Boolean value) {
        this.cysAvailable = value;
    }

    /**
     * Gets the value of the seatQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getSeatQuantity() {
        if (seatQuantity == null) {
            return  0;
        } else {
            return seatQuantity;
        }
    }

    /**
     * Sets the value of the seatQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setSeatQuantity(Integer value) {
        this.seatQuantity = value;
    }

    /**
     * Gets the value of the seatCharge property.
     * 
     * @return
     *     possible object is
     *     {@link SeatChargeType }
     *     
     */
    public SeatChargeType getSeatCharge() {
        return seatCharge;
    }

    /**
     * Sets the value of the seatCharge property.
     * 
     * @param value
     *     allowed object is
     *     {@link SeatChargeType }
     *     
     */
    public void setSeatCharge(SeatChargeType value) {
        this.seatCharge = value;
    }

    /**
     * Gets the value of the directionInd property.
     * 
     * @return
     *     possible object is
     *     {@link DirectionInd }
     *     
     */
    public DirectionInd getDirectionInd() {
        return directionInd;
    }

    /**
     * Sets the value of the directionInd property.
     * 
     * @param value
     *     allowed object is
     *     {@link DirectionInd }
     *     
     */
    public void setDirectionInd(DirectionInd value) {
        this.directionInd = value;
    }

    /**
     * Gets the value of the readOnly property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean getReadOnly() {
        return readOnly;
    }

    /**
     * Sets the value of the readOnly property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setReadOnly(Boolean value) {
        this.readOnly = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Leg)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Leg that = ((Leg) object);
        {
            List<Price> lhsPrice;
            lhsPrice = (((this.price!= null)&&(!this.price.isEmpty()))?this.getPrice():null);
            List<Price> rhsPrice;
            rhsPrice = (((that.price!= null)&&(!that.price.isEmpty()))?that.getPrice():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            String lhsCode;
            lhsCode = this.getCode();
            String rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            String lhsFlight;
            lhsFlight = this.getFlight();
            String rhsFlight;
            rhsFlight = that.getFlight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flight", lhsFlight), LocatorUtils.property(thatLocator, "flight", rhsFlight), lhsFlight, rhsFlight)) {
                return false;
            }
        }
        {
            String lhsRPH;
            lhsRPH = this.getRPH();
            String rhsRPH;
            rhsRPH = that.getRPH();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rph", lhsRPH), LocatorUtils.property(thatLocator, "rph", rhsRPH), lhsRPH, rhsRPH)) {
                return false;
            }
        }
        {
            boolean lhsCysAvailable;
            lhsCysAvailable = ((this.cysAvailable!= null)?this.isCysAvailable():false);
            boolean rhsCysAvailable;
            rhsCysAvailable = ((that.cysAvailable!= null)?that.isCysAvailable():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cysAvailable", lhsCysAvailable), LocatorUtils.property(thatLocator, "cysAvailable", rhsCysAvailable), lhsCysAvailable, rhsCysAvailable)) {
                return false;
            }
        }
        {
            int lhsSeatQuantity;
            lhsSeatQuantity = ((this.seatQuantity!= null)?this.getSeatQuantity(): 0);
            int rhsSeatQuantity;
            rhsSeatQuantity = ((that.seatQuantity!= null)?that.getSeatQuantity(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatQuantity", lhsSeatQuantity), LocatorUtils.property(thatLocator, "seatQuantity", rhsSeatQuantity), lhsSeatQuantity, rhsSeatQuantity)) {
                return false;
            }
        }
        {
            SeatChargeType lhsSeatCharge;
            lhsSeatCharge = this.getSeatCharge();
            SeatChargeType rhsSeatCharge;
            rhsSeatCharge = that.getSeatCharge();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seatCharge", lhsSeatCharge), LocatorUtils.property(thatLocator, "seatCharge", rhsSeatCharge), lhsSeatCharge, rhsSeatCharge)) {
                return false;
            }
        }
        {
            DirectionInd lhsDirectionInd;
            lhsDirectionInd = this.getDirectionInd();
            DirectionInd rhsDirectionInd;
            rhsDirectionInd = that.getDirectionInd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directionInd", lhsDirectionInd), LocatorUtils.property(thatLocator, "directionInd", rhsDirectionInd), lhsDirectionInd, rhsDirectionInd)) {
                return false;
            }
        }
        {
            Boolean lhsReadOnly;
            lhsReadOnly = this.getReadOnly();
            Boolean rhsReadOnly;
            rhsReadOnly = that.getReadOnly();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "readOnly", lhsReadOnly), LocatorUtils.property(thatLocator, "readOnly", rhsReadOnly), lhsReadOnly, rhsReadOnly)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<Price> thePrice;
            thePrice = (((this.price!= null)&&(!this.price.isEmpty()))?this.getPrice():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            String theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            String theFlight;
            theFlight = this.getFlight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flight", theFlight), currentHashCode, theFlight);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rph", theRPH), currentHashCode, theRPH);
        }
        {
            boolean theCysAvailable;
            theCysAvailable = ((this.cysAvailable!= null)?this.isCysAvailable():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cysAvailable", theCysAvailable), currentHashCode, theCysAvailable);
        }
        {
            int theSeatQuantity;
            theSeatQuantity = ((this.seatQuantity!= null)?this.getSeatQuantity(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatQuantity", theSeatQuantity), currentHashCode, theSeatQuantity);
        }
        {
            SeatChargeType theSeatCharge;
            theSeatCharge = this.getSeatCharge();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seatCharge", theSeatCharge), currentHashCode, theSeatCharge);
        }
        {
            DirectionInd theDirectionInd;
            theDirectionInd = this.getDirectionInd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directionInd", theDirectionInd), currentHashCode, theDirectionInd);
        }
        {
            Boolean theReadOnly;
            theReadOnly = this.getReadOnly();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "readOnly", theReadOnly), currentHashCode, theReadOnly);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<Price> thePrice;
            thePrice = (((this.price!= null)&&(!this.price.isEmpty()))?this.getPrice():null);
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            String theCode;
            theCode = this.getCode();
            strategy.appendField(locator, this, "code", buffer, theCode);
        }
        {
            String theFlight;
            theFlight = this.getFlight();
            strategy.appendField(locator, this, "flight", buffer, theFlight);
        }
        {
            String theRPH;
            theRPH = this.getRPH();
            strategy.appendField(locator, this, "rph", buffer, theRPH);
        }
        {
            boolean theCysAvailable;
            theCysAvailable = ((this.cysAvailable!= null)?this.isCysAvailable():false);
            strategy.appendField(locator, this, "cysAvailable", buffer, theCysAvailable);
        }
        {
            int theSeatQuantity;
            theSeatQuantity = ((this.seatQuantity!= null)?this.getSeatQuantity(): 0);
            strategy.appendField(locator, this, "seatQuantity", buffer, theSeatQuantity);
        }
        {
            SeatChargeType theSeatCharge;
            theSeatCharge = this.getSeatCharge();
            strategy.appendField(locator, this, "seatCharge", buffer, theSeatCharge);
        }
        {
            DirectionInd theDirectionInd;
            theDirectionInd = this.getDirectionInd();
            strategy.appendField(locator, this, "directionInd", buffer, theDirectionInd);
        }
        {
            Boolean theReadOnly;
            theReadOnly = this.getReadOnly();
            strategy.appendField(locator, this, "readOnly", buffer, theReadOnly);
        }
        return buffer;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param price
     *     allowed object is
     *     {@link Price }
     *     
     */
    public void setPrice(List<Price> price) {
        this.price = price;
    }

}
