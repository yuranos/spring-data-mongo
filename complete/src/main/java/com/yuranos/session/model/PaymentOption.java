//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.07 at 03:28:23 PM EET 
//


package com.yuranos.session.model;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.validation.Valid;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;
import java.math.BigDecimal;


/**
 * <p>Java class for PaymentOption complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PaymentOption">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="Country">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="Site">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="Brand">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="BankCard">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="Name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="Id" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="PaymentMethod">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="Fee">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="Type" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 &lt;attribute name="NominalValue" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
 *                 &lt;attribute name="ActualValue" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
 *                 &lt;attribute name="ValueBeforeDiscount" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
 *                 &lt;attribute name="MaxFee" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="PaymentDayOffset" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PaymentOption", propOrder = {
    "id",
    "country",
    "site",
    "brand",
    "bankCard",
    "paymentMethod",
    "fee",
    "paymentDayOffset"
})
public class PaymentOption
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 12345L;
    @XmlElement(required = true)
    @NotNull
    protected String id;
    @XmlElement(name = "Country", required = true)
    @NotNull
    @Valid
    protected PaymentOption.Country country;
    @XmlElement(name = "Site", required = true)
    @NotNull
    @Valid
    protected PaymentOption.Site site;
    @XmlElement(name = "Brand", required = true)
    @NotNull
    @Valid
    protected PaymentOption.Brand brand;
    @XmlElement(name = "BankCard", required = true)
    @NotNull
    @Valid
    protected PaymentOption.BankCard bankCard;
    @XmlElement(name = "PaymentMethod", required = true)
    @NotNull
    @Valid
    protected PaymentOption.PaymentMethod paymentMethod;
    @XmlElement(name = "Fee", required = true)
    @NotNull
    @Valid
    protected PaymentOption.Fee fee;
    @XmlElement(name = "PaymentDayOffset")
    @NotNull
    protected int paymentDayOffset;

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link PaymentOption.Country }
     *
     */
    public PaymentOption.Country getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.Country }
     *
     */
    public void setCountry(PaymentOption.Country value) {
        this.country = value;
    }

    /**
     * Gets the value of the site property.
     *
     * @return
     *     possible object is
     *     {@link PaymentOption.Site }
     *
     */
    public PaymentOption.Site getSite() {
        return site;
    }

    /**
     * Sets the value of the site property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.Site }
     *
     */
    public void setSite(PaymentOption.Site value) {
        this.site = value;
    }

    /**
     * Gets the value of the brand property.
     *
     * @return
     *     possible object is
     *     {@link PaymentOption.Brand }
     *
     */
    public PaymentOption.Brand getBrand() {
        return brand;
    }

    /**
     * Sets the value of the brand property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.Brand }
     *
     */
    public void setBrand(PaymentOption.Brand value) {
        this.brand = value;
    }

    /**
     * Gets the value of the bankCard property.
     *
     * @return
     *     possible object is
     *     {@link PaymentOption.BankCard }
     *
     */
    public PaymentOption.BankCard getBankCard() {
        return bankCard;
    }

    /**
     * Sets the value of the bankCard property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.BankCard }
     *
     */
    public void setBankCard(PaymentOption.BankCard value) {
        this.bankCard = value;
    }

    /**
     * Gets the value of the paymentMethod property.
     *
     * @return
     *     possible object is
     *     {@link PaymentOption.PaymentMethod }
     *
     */
    public PaymentOption.PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * Sets the value of the paymentMethod property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.PaymentMethod }
     *
     */
    public void setPaymentMethod(PaymentOption.PaymentMethod value) {
        this.paymentMethod = value;
    }

    /**
     * Gets the value of the fee property.
     *
     * @return
     *     possible object is
     *     {@link PaymentOption.Fee }
     *
     */
    public PaymentOption.Fee getFee() {
        return fee;
    }

    /**
     * Sets the value of the fee property.
     *
     * @param value
     *     allowed object is
     *     {@link PaymentOption.Fee }
     *
     */
    public void setFee(PaymentOption.Fee value) {
        this.fee = value;
    }

    /**
     * Gets the value of the paymentDayOffset property.
     *
     */
    public int getPaymentDayOffset() {
        return paymentDayOffset;
    }

    /**
     * Sets the value of the paymentDayOffset property.
     *
     */
    public void setPaymentDayOffset(int value) {
        this.paymentDayOffset = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PaymentOption)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PaymentOption that = ((PaymentOption) object);
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            PaymentOption.Country lhsCountry;
            lhsCountry = this.getCountry();
            PaymentOption.Country rhsCountry;
            rhsCountry = that.getCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "country", lhsCountry), LocatorUtils.property(thatLocator, "country", rhsCountry), lhsCountry, rhsCountry)) {
                return false;
            }
        }
        {
            PaymentOption.Site lhsSite;
            lhsSite = this.getSite();
            PaymentOption.Site rhsSite;
            rhsSite = that.getSite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "site", lhsSite), LocatorUtils.property(thatLocator, "site", rhsSite), lhsSite, rhsSite)) {
                return false;
            }
        }
        {
            PaymentOption.Brand lhsBrand;
            lhsBrand = this.getBrand();
            PaymentOption.Brand rhsBrand;
            rhsBrand = that.getBrand();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "brand", lhsBrand), LocatorUtils.property(thatLocator, "brand", rhsBrand), lhsBrand, rhsBrand)) {
                return false;
            }
        }
        {
            PaymentOption.BankCard lhsBankCard;
            lhsBankCard = this.getBankCard();
            PaymentOption.BankCard rhsBankCard;
            rhsBankCard = that.getBankCard();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bankCard", lhsBankCard), LocatorUtils.property(thatLocator, "bankCard", rhsBankCard), lhsBankCard, rhsBankCard)) {
                return false;
            }
        }
        {
            PaymentOption.PaymentMethod lhsPaymentMethod;
            lhsPaymentMethod = this.getPaymentMethod();
            PaymentOption.PaymentMethod rhsPaymentMethod;
            rhsPaymentMethod = that.getPaymentMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentMethod", lhsPaymentMethod), LocatorUtils.property(thatLocator, "paymentMethod", rhsPaymentMethod), lhsPaymentMethod, rhsPaymentMethod)) {
                return false;
            }
        }
        {
            PaymentOption.Fee lhsFee;
            lhsFee = this.getFee();
            PaymentOption.Fee rhsFee;
            rhsFee = that.getFee();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fee", lhsFee), LocatorUtils.property(thatLocator, "fee", rhsFee), lhsFee, rhsFee)) {
                return false;
            }
        }
        {
            int lhsPaymentDayOffset;
            lhsPaymentDayOffset = (true?this.getPaymentDayOffset(): 0);
            int rhsPaymentDayOffset;
            rhsPaymentDayOffset = (true?that.getPaymentDayOffset(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentDayOffset", lhsPaymentDayOffset), LocatorUtils.property(thatLocator, "paymentDayOffset", rhsPaymentDayOffset), lhsPaymentDayOffset, rhsPaymentDayOffset)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            PaymentOption.Country theCountry;
            theCountry = this.getCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "country", theCountry), currentHashCode, theCountry);
        }
        {
            PaymentOption.Site theSite;
            theSite = this.getSite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "site", theSite), currentHashCode, theSite);
        }
        {
            PaymentOption.Brand theBrand;
            theBrand = this.getBrand();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brand", theBrand), currentHashCode, theBrand);
        }
        {
            PaymentOption.BankCard theBankCard;
            theBankCard = this.getBankCard();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bankCard", theBankCard), currentHashCode, theBankCard);
        }
        {
            PaymentOption.PaymentMethod thePaymentMethod;
            thePaymentMethod = this.getPaymentMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentMethod", thePaymentMethod), currentHashCode, thePaymentMethod);
        }
        {
            PaymentOption.Fee theFee;
            theFee = this.getFee();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fee", theFee), currentHashCode, theFee);
        }
        {
            int thePaymentDayOffset;
            thePaymentDayOffset = (true?this.getPaymentDayOffset(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentDayOffset", thePaymentDayOffset), currentHashCode, thePaymentDayOffset);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        {
            PaymentOption.Country theCountry;
            theCountry = this.getCountry();
            strategy.appendField(locator, this, "country", buffer, theCountry);
        }
        {
            PaymentOption.Site theSite;
            theSite = this.getSite();
            strategy.appendField(locator, this, "site", buffer, theSite);
        }
        {
            PaymentOption.Brand theBrand;
            theBrand = this.getBrand();
            strategy.appendField(locator, this, "brand", buffer, theBrand);
        }
        {
            PaymentOption.BankCard theBankCard;
            theBankCard = this.getBankCard();
            strategy.appendField(locator, this, "bankCard", buffer, theBankCard);
        }
        {
            PaymentOption.PaymentMethod thePaymentMethod;
            thePaymentMethod = this.getPaymentMethod();
            strategy.appendField(locator, this, "paymentMethod", buffer, thePaymentMethod);
        }
        {
            PaymentOption.Fee theFee;
            theFee = this.getFee();
            strategy.appendField(locator, this, "fee", buffer, theFee);
        }
        {
            int thePaymentDayOffset;
            thePaymentDayOffset = (true?this.getPaymentDayOffset(): 0);
            strategy.appendField(locator, this, "paymentDayOffset", buffer, thePaymentDayOffset);
        }
        return buffer;
    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="Name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="Id" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class BankCard
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Code", required = true)
        @NotNull
        protected String code;
        @XmlAttribute(name = "Name", required = true)
        @NotNull
        protected String name;
        @XmlAttribute(name = "Id", required = true)
        @NotNull
        protected int id;

        /**
         * Gets the value of the code property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setCode(String value) {
            this.code = value;
        }

        /**
         * Gets the value of the name property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Gets the value of the id property.
         *
         */
        public int getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         *
         */
        public void setId(int value) {
            this.id = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.BankCard)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.BankCard that = ((PaymentOption.BankCard) object);
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            {
                String lhsName;
                lhsName = this.getName();
                String rhsName;
                rhsName = that.getName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                    return false;
                }
            }
            {
                int lhsId;
                lhsId = (true?this.getId(): 0);
                int rhsId;
                rhsId = (true?that.getId(): 0);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            {
                String theName;
                theName = this.getName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
            }
            {
                int theId;
                theId = (true?this.getId(): 0);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            {
                String theName;
                theName = this.getName();
                strategy.appendField(locator, this, "name", buffer, theName);
            }
            {
                int theId;
                theId = (true?this.getId(): 0);
                strategy.appendField(locator, this, "id", buffer, theId);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Brand
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Code", required = true)
        @NotNull
        protected String code;

        /**
         * Gets the value of the code property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.Brand)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.Brand that = ((PaymentOption.Brand) object);
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Country
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Code", required = true)
        @NotNull
        protected String code;

        /**
         * Gets the value of the code property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.Country)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.Country that = ((PaymentOption.Country) object);
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Type" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       &lt;attribute name="NominalValue" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
     *       &lt;attribute name="ActualValue" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
     *       &lt;attribute name="ValueBeforeDiscount" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
     *       &lt;attribute name="MaxFee" use="required" type="{http://api.thomascook.com/basket/1.0/common}Money" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Fee
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Type", required = true)
        @NotNull
        protected String type;
        @XmlAttribute(name = "NominalValue", required = true)
        @NotNull
        @Digits(integer = 10, fraction = 2)
        protected BigDecimal nominalValue;
        @XmlAttribute(name = "ActualValue", required = true)
        @NotNull
        @Digits(integer = 10, fraction = 2)
        protected BigDecimal actualValue;
        @XmlAttribute(name = "ValueBeforeDiscount", required = true)
        @NotNull
        @Digits(integer = 10, fraction = 2)
        protected BigDecimal valueBeforeDiscount;
        @XmlAttribute(name = "MaxFee", required = true)
        @NotNull
        @Digits(integer = 10, fraction = 2)
        protected BigDecimal maxFee;

        /**
         * Gets the value of the type property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setType(String value) {
            this.type = value;
        }

        /**
         * Gets the value of the nominalValue property.
         *
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *
         */
        public BigDecimal getNominalValue() {
            return nominalValue;
        }

        /**
         * Sets the value of the nominalValue property.
         *
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *
         */
        public void setNominalValue(BigDecimal value) {
            this.nominalValue = value;
        }

        /**
         * Gets the value of the actualValue property.
         *
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *
         */
        public BigDecimal getActualValue() {
            return actualValue;
        }

        /**
         * Sets the value of the actualValue property.
         *
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *
         */
        public void setActualValue(BigDecimal value) {
            this.actualValue = value;
        }

        /**
         * Gets the value of the valueBeforeDiscount property.
         *
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *
         */
        public BigDecimal getValueBeforeDiscount() {
            return valueBeforeDiscount;
        }

        /**
         * Sets the value of the valueBeforeDiscount property.
         *
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *
         */
        public void setValueBeforeDiscount(BigDecimal value) {
            this.valueBeforeDiscount = value;
        }

        /**
         * Gets the value of the maxFee property.
         *
         * @return
         *     possible object is
         *     {@link BigDecimal }
         *
         */
        public BigDecimal getMaxFee() {
            return maxFee;
        }

        /**
         * Sets the value of the maxFee property.
         *
         * @param value
         *     allowed object is
         *     {@link BigDecimal }
         *
         */
        public void setMaxFee(BigDecimal value) {
            this.maxFee = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.Fee)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.Fee that = ((PaymentOption.Fee) object);
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                BigDecimal lhsNominalValue;
                lhsNominalValue = this.getNominalValue();
                BigDecimal rhsNominalValue;
                rhsNominalValue = that.getNominalValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nominalValue", lhsNominalValue), LocatorUtils.property(thatLocator, "nominalValue", rhsNominalValue), lhsNominalValue, rhsNominalValue)) {
                    return false;
                }
            }
            {
                BigDecimal lhsActualValue;
                lhsActualValue = this.getActualValue();
                BigDecimal rhsActualValue;
                rhsActualValue = that.getActualValue();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "actualValue", lhsActualValue), LocatorUtils.property(thatLocator, "actualValue", rhsActualValue), lhsActualValue, rhsActualValue)) {
                    return false;
                }
            }
            {
                BigDecimal lhsValueBeforeDiscount;
                lhsValueBeforeDiscount = this.getValueBeforeDiscount();
                BigDecimal rhsValueBeforeDiscount;
                rhsValueBeforeDiscount = that.getValueBeforeDiscount();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "valueBeforeDiscount", lhsValueBeforeDiscount), LocatorUtils.property(thatLocator, "valueBeforeDiscount", rhsValueBeforeDiscount), lhsValueBeforeDiscount, rhsValueBeforeDiscount)) {
                    return false;
                }
            }
            {
                BigDecimal lhsMaxFee;
                lhsMaxFee = this.getMaxFee();
                BigDecimal rhsMaxFee;
                rhsMaxFee = that.getMaxFee();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "maxFee", lhsMaxFee), LocatorUtils.property(thatLocator, "maxFee", rhsMaxFee), lhsMaxFee, rhsMaxFee)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                BigDecimal theNominalValue;
                theNominalValue = this.getNominalValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nominalValue", theNominalValue), currentHashCode, theNominalValue);
            }
            {
                BigDecimal theActualValue;
                theActualValue = this.getActualValue();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "actualValue", theActualValue), currentHashCode, theActualValue);
            }
            {
                BigDecimal theValueBeforeDiscount;
                theValueBeforeDiscount = this.getValueBeforeDiscount();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueBeforeDiscount", theValueBeforeDiscount), currentHashCode, theValueBeforeDiscount);
            }
            {
                BigDecimal theMaxFee;
                theMaxFee = this.getMaxFee();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxFee", theMaxFee), currentHashCode, theMaxFee);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                BigDecimal theNominalValue;
                theNominalValue = this.getNominalValue();
                strategy.appendField(locator, this, "nominalValue", buffer, theNominalValue);
            }
            {
                BigDecimal theActualValue;
                theActualValue = this.getActualValue();
                strategy.appendField(locator, this, "actualValue", buffer, theActualValue);
            }
            {
                BigDecimal theValueBeforeDiscount;
                theValueBeforeDiscount = this.getValueBeforeDiscount();
                strategy.appendField(locator, this, "valueBeforeDiscount", buffer, theValueBeforeDiscount);
            }
            {
                BigDecimal theMaxFee;
                theMaxFee = this.getMaxFee();
                strategy.appendField(locator, this, "maxFee", buffer, theMaxFee);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class PaymentMethod
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Name", required = true)
        @NotNull
        protected String name;

        /**
         * Gets the value of the name property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setName(String value) {
            this.name = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.PaymentMethod)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.PaymentMethod that = ((PaymentOption.PaymentMethod) object);
            {
                String lhsName;
                lhsName = this.getName();
                String rhsName;
                rhsName = that.getName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theName;
                theName = this.getName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theName;
                theName = this.getName();
                strategy.appendField(locator, this, "name", buffer, theName);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     *
     * <p>The following schema fragment specifies the expected content contained within this class.
     *
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;attribute name="Code" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     *
     *
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Site
        implements Serializable, Equals, HashCode, ToString
    {

        private final static long serialVersionUID = 12345L;
        @XmlAttribute(name = "Code", required = true)
        @NotNull
        protected String code;

        /**
         * Gets the value of the code property.
         *
         * @return
         *     possible object is
         *     {@link String }
         *
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         *
         * @param value
         *     allowed object is
         *     {@link String }
         *
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PaymentOption.Site)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PaymentOption.Site that = ((PaymentOption.Site) object);
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

    }

}
