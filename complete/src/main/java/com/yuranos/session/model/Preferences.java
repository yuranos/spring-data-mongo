//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.07 at 03:28:23 PM EET 
//


package com.yuranos.session.model;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import javax.validation.Valid;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>Java class for Preferences complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Preferences">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence minOccurs="0">
 *         &lt;element name="SelectedPreferencesList" type="{http://api.thomascook.com/basket/1.0/common}SelectedPreference" maxOccurs="99" minOccurs="0"/>
 *         &lt;element name="AvailablePreferencesList" type="{http://api.thomascook.com/basket/1.0/common}AvailablePreference" maxOccurs="99" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Preferences", propOrder = {
    "selectedPreferencesList",
    "availablePreferencesList"
})
public class Preferences
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 12345L;
    @XmlElement(name = "SelectedPreferencesList", nillable = true)
    @Size(min = 0, max = 99)
    @Valid
    protected List<SelectedPreference> selectedPreferencesList;
    @XmlElement(name = "AvailablePreferencesList", nillable = true)
    @Size(min = 0, max = 99)
    @Valid
    protected List<AvailablePreference> availablePreferencesList;

    /**
     * Gets the value of the selectedPreferencesList property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the selectedPreferencesList property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSelectedPreferencesList().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SelectedPreference }
     * 
     * 
     */
    public List<SelectedPreference> getSelectedPreferencesList() {
        if (selectedPreferencesList == null) {
            selectedPreferencesList = new ArrayList<SelectedPreference>();
        }
        return this.selectedPreferencesList;
    }

    /**
     * Gets the value of the availablePreferencesList property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the availablePreferencesList property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAvailablePreferencesList().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AvailablePreference }
     * 
     * 
     */
    public List<AvailablePreference> getAvailablePreferencesList() {
        if (availablePreferencesList == null) {
            availablePreferencesList = new ArrayList<AvailablePreference>();
        }
        return this.availablePreferencesList;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Preferences)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Preferences that = ((Preferences) object);
        {
            List<SelectedPreference> lhsSelectedPreferencesList;
            lhsSelectedPreferencesList = (((this.selectedPreferencesList!= null)&&(!this.selectedPreferencesList.isEmpty()))?this.getSelectedPreferencesList():null);
            List<SelectedPreference> rhsSelectedPreferencesList;
            rhsSelectedPreferencesList = (((that.selectedPreferencesList!= null)&&(!that.selectedPreferencesList.isEmpty()))?that.getSelectedPreferencesList():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "selectedPreferencesList", lhsSelectedPreferencesList), LocatorUtils.property(thatLocator, "selectedPreferencesList", rhsSelectedPreferencesList), lhsSelectedPreferencesList, rhsSelectedPreferencesList)) {
                return false;
            }
        }
        {
            List<AvailablePreference> lhsAvailablePreferencesList;
            lhsAvailablePreferencesList = (((this.availablePreferencesList!= null)&&(!this.availablePreferencesList.isEmpty()))?this.getAvailablePreferencesList():null);
            List<AvailablePreference> rhsAvailablePreferencesList;
            rhsAvailablePreferencesList = (((that.availablePreferencesList!= null)&&(!that.availablePreferencesList.isEmpty()))?that.getAvailablePreferencesList():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "availablePreferencesList", lhsAvailablePreferencesList), LocatorUtils.property(thatLocator, "availablePreferencesList", rhsAvailablePreferencesList), lhsAvailablePreferencesList, rhsAvailablePreferencesList)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<SelectedPreference> theSelectedPreferencesList;
            theSelectedPreferencesList = (((this.selectedPreferencesList!= null)&&(!this.selectedPreferencesList.isEmpty()))?this.getSelectedPreferencesList():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "selectedPreferencesList", theSelectedPreferencesList), currentHashCode, theSelectedPreferencesList);
        }
        {
            List<AvailablePreference> theAvailablePreferencesList;
            theAvailablePreferencesList = (((this.availablePreferencesList!= null)&&(!this.availablePreferencesList.isEmpty()))?this.getAvailablePreferencesList():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "availablePreferencesList", theAvailablePreferencesList), currentHashCode, theAvailablePreferencesList);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<SelectedPreference> theSelectedPreferencesList;
            theSelectedPreferencesList = (((this.selectedPreferencesList!= null)&&(!this.selectedPreferencesList.isEmpty()))?this.getSelectedPreferencesList():null);
            strategy.appendField(locator, this, "selectedPreferencesList", buffer, theSelectedPreferencesList);
        }
        {
            List<AvailablePreference> theAvailablePreferencesList;
            theAvailablePreferencesList = (((this.availablePreferencesList!= null)&&(!this.availablePreferencesList.isEmpty()))?this.getAvailablePreferencesList():null);
            strategy.appendField(locator, this, "availablePreferencesList", buffer, theAvailablePreferencesList);
        }
        return buffer;
    }

    /**
     * Sets the value of the selectedPreferencesList property.
     * 
     * @param selectedPreferencesList
     *     allowed object is
     *     {@link SelectedPreference }
     *     
     */
    public void setSelectedPreferencesList(List<SelectedPreference> selectedPreferencesList) {
        this.selectedPreferencesList = selectedPreferencesList;
    }

    /**
     * Sets the value of the availablePreferencesList property.
     * 
     * @param availablePreferencesList
     *     allowed object is
     *     {@link AvailablePreference }
     *     
     */
    public void setAvailablePreferencesList(List<AvailablePreference> availablePreferencesList) {
        this.availablePreferencesList = availablePreferencesList;
    }

}
